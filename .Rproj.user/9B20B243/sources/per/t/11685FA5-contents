---
title: Plots in Base R
author: Patrick Murphy
date: '2019-01-26'
slug: plots-in-base-r
categories:
  - R Basics
tags:
  - base R
  - plots
  - scatter plots
  - plot matrix
  - box plot
  - histogram
output:
  blogdown::html_page:
    toc: true
---
```{r include=FALSE}
knitr::opts_chunk$set(collapse = TRUE)

```
<hr/>  

The base graphics package is uses the older S-language graphics lower level functions, not the newer grid functions that lattice or ggplot2 use.  However, I find these legacy functions to be quick, easy to use and quite suitable for most exploratory tasks.  We will use the newer packages to produce publish quality data graphics in time.  For now lets look at the most commonly used base R graphing commands.  

##hist()
Hist takes x as its first argument which is usually a vector.  Like most statistical software R has built in sample data that we can play around with.  Two good ones are iris and mtcars, ? them to find out more.
```{r plot1}
str(iris)
attach(iris)    # this loads iris into a search path, so we dont have to type it anymore
hist(Sepal.Length)
hist(Sepal.Length,
     breaks = seq(from=3, to=9, by=.333),      # always check the breaks of a histogram
     main= 'Distribution of Sepal Length',
     xlab= 'Length in cm',
     col='grey')
```
##plot()
Plot takes multiple vectors as inputs.  It can also plot functions and objects. 
```{r plot2}
plot(Petal.Length, Petal.Width)  # A basic scatterplot
plot(Petal.Length, Petal.Width,  # A better one
     frame.plot = FALSE,
     main = 'Petal width as a f() of length',
     xlab = 'Length (cm)', ylab = 'Width (cm)',
     cex = .75, pch = 19)
iris_fit_1<- lm(Petal.Width ~ Petal.Length) # With a regression line
abline(iris_fit_1, col = 'red')
text(3, .5, col = 'red', cex = .8, 
     labels = paste('Slope =',round(coef(iris_fit_1)[2],digits = 2)))
     
par(mfrow = c(2, 2))
plot(iris_fit_1) # Perhaps we want to see model diagnostics
     
```